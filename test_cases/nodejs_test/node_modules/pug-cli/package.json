{
  "_args": [
    [
      {
        "raw": "pug-cli@^1.0.0-alpha6",
        "scope": null,
        "escapedName": "pug-cli",
        "name": "pug-cli",
        "rawSpec": "^1.0.0-alpha6",
        "spec": ">=1.0.0-alpha6 <2.0.0",
        "type": "range"
      },
      "/media/sf_f/program/paper_graph/test_cases/nodejs_test"
    ]
  ],
  "_from": "pug-cli@>=1.0.0-alpha6 <2.0.0",
  "_id": "pug-cli@1.0.0-alpha6",
  "_inCache": true,
  "_location": "/pug-cli",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/pug-cli-1.0.0-alpha6.tgz_1464825444800_0.8597624313551933"
  },
  "_npmUser": {
    "name": "timothygu",
    "email": "timothygu99@gmail.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pug-cli@^1.0.0-alpha6",
    "scope": null,
    "escapedName": "pug-cli",
    "name": "pug-cli",
    "rawSpec": "^1.0.0-alpha6",
    "spec": ">=1.0.0-alpha6 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/pug-cli/-/pug-cli-1.0.0-alpha6.tgz",
  "_shasum": "1ca539ea4ac0ebb69ce4aae84aeed5d64ffe6501",
  "_shrinkwrap": null,
  "_spec": "pug-cli@^1.0.0-alpha6",
  "_where": "/media/sf_f/program/paper_graph/test_cases/nodejs_test",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "bin": {
    "pug": "./index.js"
  },
  "bugs": {
    "url": "https://github.com/pugjs/pug-cli/issues"
  },
  "dependencies": {
    "chalk": "^1.0.0",
    "commander": "^2.8.1",
    "mkdirp": "^0.5.1",
    "pug": "^2.0.0-alpha7"
  },
  "description": "Pug's CLI interface",
  "devDependencies": {
    "istanbul": "*",
    "mocha": "*",
    "rimraf": "^2.3.4"
  },
  "directories": {},
  "dist": {
    "shasum": "1ca539ea4ac0ebb69ce4aae84aeed5d64ffe6501",
    "tarball": "https://registry.npmjs.org/pug-cli/-/pug-cli-1.0.0-alpha6.tgz"
  },
  "gitHead": "7d4cec4806f530fa4ae31e76e0d6ba0dacf2b7a9",
  "homepage": "https://github.com/pugjs/pug-cli#readme",
  "keywords": [],
  "license": "MIT",
  "maintainers": [
    {
      "name": "Timothy Gu",
      "email": "timothygu99@gmail.com"
    },
    {
      "name": "Forbes Lindesay",
      "email": "forbes@lindesay.co.uk"
    }
  ],
  "name": "pug-cli",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "# pug-cli\n\nPug's CLI interface\n\n[![Build Status](https://img.shields.io/travis/pugjs/pug-cli/master.svg)](https://travis-ci.org/pugjs/pug-cli)\n[![Dependency Status](https://img.shields.io/david/pugjs/pug-cli.svg)](https://david-dm.org/pugjs/pug-cli)\n[![NPM version](https://img.shields.io/npm/v/pug-cli.svg)](https://www.npmjs.org/package/pug-cli)\n[![Coverage Status](https://img.shields.io/codecov/c/github/pugjs/pug-cli.svg)](https://codecov.io/gh/pugjs/pug-cli)\n\n## Usage\n\n```\n$ pug [options] [dir|file ...]\n```\n\nRender `<file>`s and all files in `<dir>`s. If no files are specified,\ninput is taken from standard input and output to standard output.\n\n### Options\n\n```\n-h, --help             output usage information\n-V, --version          output the version number\n-O, --obj <str|path>   JSON/JavaScript options object or file\n-o, --out <dir>        output the rendered HTML or compiled JavaScript to\n                       <dir>\n-p, --path <path>      filename used to resolve includes\n-P, --pretty           compile pretty HTML output\n-c, --client           compile function for client-side runtime.js\n-n, --name <str>       the name of the compiled template (requires --client)\n-D, --no-debug         compile without debugging (smaller functions)\n-w, --watch            watch files for changes and automatically re-render\n-E, --extension <ext>  specify the output file extension\n-s, --silent           do not output logs\n--name-after-file      name the template after the last section of the file\n                       path (requires --client and overriden by --name)\n--doctype <str>        specify the doctype on the command line (useful if it\n                       is not specified by the template)\n```\n\n### Examples\n\nRender all files in the `templates` directory:\n\n```\n$ pug templates\n```\n\nCreate `{foo,bar}.html`:\n\n```\n$ pug {foo,bar}.pug\n```\n\nUsing `pug` over standard input and output streams:\n\n```\n$ pug < my.pug > my.html\n$ echo \"h1 Pug!\" | pug\n```\n\nRender all files in `foo` and `bar` directories to `/tmp`:\n\n```\n$ pug foo bar --out /tmp\n```\n\nSpecify options through a string:\n\n```\n$ pug -O '{\"doctype\": \"html\"}' foo.pug\n# or, using JavaScript instead of JSON\n$ pug -O \"{doctype: 'html'}\" foo.pug\n```\n\nSpecify options through a file:\n\n```\n$ echo \"exports.doctype = 'html';\" > options.js\n$ pug -O options.js foo.pug\n# or, JSON works too\n$ echo '{\"doctype\": \"html\"}' > options.json\n$ pug -O options.json foo.pug\n```\n\n## Installation\n\n    npm install pug-cli -g\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pugjs/pug-cli.git"
  },
  "scripts": {
    "coverage": "istanbul cover --report none --dir cov-pt0 node_modules/mocha/bin/_mocha -- -R dot",
    "postcoverage": "istanbul report --include cov-pt\\*/coverage.json && rimraf cov-pt*",
    "precoverage": "rimraf coverage && rimraf cov-pt*",
    "test": "mocha -R spec --bail"
  },
  "version": "1.0.0-alpha6"
}
